static_resources:
  listeners:
    - name: listener_0
      address:
        socket_address: { address: 0.0.0.0, port_value: 8080 }
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: ingress_http
                route_config:
                  virtual_hosts:
                    - name: backend
                      domains: ["*"]
                      routes:
                        - match: { prefix: "/api/auth" }
                          route: { cluster: auth_service }

                        - match: { prefix: "/api/info" }
                          route: { cluster: user_service }
                          typed_per_filter_config:
                            envoy.filters.http.jwt_authn:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtRequirement
                              provider_name: auth_provider

                        - match: { prefix: "/api/sendCoin" }
                          route: { cluster: coins_command_service }
                          typed_per_filter_config:
                            envoy.filters.http.jwt_authn:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtRequirement
                              provider_name: auth_provider

                        - match: { prefix: "/api/buy" }
                          route: { cluster: merch_service }
                          typed_per_filter_config:
                            envoy.filters.http.jwt_authn:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtRequirement
                              provider_name: auth_provider

                http_filters:
                  - name: envoy.filters.http.jwt_authn
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
                      providers:
                        auth_provider:
                          issuer: "https://my-auth-provider"
                          audiences:
                            - "my-api"
                          remote_jwks:
                            http_uri:
                              uri: "https://my-auth-provider/.well-known/jwks.json"
                              cluster: auth_service
                              timeout: 5s
                          from_headers:
                            - name: Authorization
                              value_prefix: "Bearer "
                          forward: true

                  - name: envoy.filters.http.router

  clusters:
    - name: auth_service
      connect_timeout: 0.25s
      type: LOGICAL_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: auth_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address: { address: auth-service, port_value: 8080 }

    - name: user_service
      connect_timeout: 0.25s
      type: LOGICAL_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: user_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address: { address: user-service, port_value: 50051 }

    - name: coins_command_service
      connect_timeout: 0.25s
      type: LOGICAL_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: coins_command_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address: { address: coins-command, port_value: 50052 }

    - name: merch_service
      connect_timeout: 0.25s
      type: LOGICAL_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: merch_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address: { address: merch-service, port_value: 50053 }
