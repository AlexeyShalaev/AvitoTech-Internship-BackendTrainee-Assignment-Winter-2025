[tool.poetry]
name = "Auth Service"
version = "0.1.0"
description = ""
packages = [{ include = "src" }]
authors = ["Alex Shalaev <shalaevad.alexey@yandex.ru>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
alembic = "1.14.*"
asyncpg = "0.30.*"
psycopg2 = "2.9.*"
sqlalchemy = { version = "2.0.*", extras = ["asyncio"] }
pydantic = "2.10.*"
pydantic-settings = "2.7.*"
fastapi = "0.115.*"
uvicorn = { version = "0.34.*", extras = ["standard"] }
prometheus-fastapi-instrumentator = "7.0.*"
loguru = "0.7.*"

[tool.poetry.dev-dependencies]
black = "^24.8.0"
isort = "^5.13.2"
ruff = "^0.6.1"
mypy = "^1.14.1"
pytest = "*"
pytest-cov = "*"
pytest-deadfixtures = "*"
pytest-mock = "*"
pytest-repeat = "*"
pytest-asyncio = "*"
httpx = "^0.28.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pylint]
init-hook='import sys,os;[sys.path.append(di) for di in os.listdir(os.getcwd())]'

[tool.pylint.master]
extension-pkg-allow-list = ["pydantic"]

[tool.pylint.format]
max-line-length = 120

[tool.pylint.basic]
good-names = ["db"]

[tool.pylint."MESSAGES CONTROL"]
disable = [
  "C0114",  # missing-module-docstring
  "C0116",  # missing-function-docstring
  "R0903",  # too-few-public-methods (for sqlalchemy tables and pydantic classes)
  "C0115",  # missing-class-docstring (for api routes)
]

[tool.mypy]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = false
no_implicit_optional = true
plugins = ["sqlalchemy.ext.mypy.plugin"]

[tool.black]
line-length = 120
target-version = ['py312']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
lines_after_imports = 2
multi_line_output = 3
line_length = 120
include_trailing_comma = true
