import os
import ydb
from loguru import logger


class YDBMigrationManager:
    def __init__(self, endpoint: str, database: str, migrations_dir: str = "migrations"):
        self._migrations_dir: str = migrations_dir
        self._driver = ydb.aio.Driver(endpoint=endpoint, database=database)
        self._pool: ydb.aio.QuerySessionPool | None = None
        self._table_prefix = database  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –±–∞–∑—ã –∫–∞–∫ –ø—Ä–µ—Ñ–∏–∫—Å —Ç–∞–±–ª–∏—Ü

    async def connect(self, timeout: int = 10):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ YDB"""
        await self._driver.wait(timeout=timeout)
        self._pool = ydb.aio.QuerySessionPool(self._driver)

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å YDB"""
        if self._pool:
            await self._pool.stop()
            await self._driver.stop()

    async def execute(self, query: str, params: dict = None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å"""
        return await self._pool.execute_with_retries(
            f"PRAGMA TablePathPrefix('{self._table_prefix}');\n{query}", 
            params or {}
        )

    async def ensure_migrations_table(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É migrations, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        try:
            await self.execute(f"""
                CREATE TABLE IF NOT EXISTS migrations (
                    id Utf8,
                    applied_at Timestamp,
                    PRIMARY KEY (id)
                );
            """)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ `migrations` –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ (—Å–æ–∑–¥–∞–Ω–∞, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞).")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã `migrations`: {e}")

    async def applied_migrations(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        try:
            result_sets = await self.execute("SELECT id FROM migrations ORDER BY applied_at DESC")
            return [row["id"] for row in result_sets[0].rows]
        except Exception as ex:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π: {ex}")
            return []

    async def apply_migration(self, migration_id: str, sql: str):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–¥–Ω—É –º–∏–≥—Ä–∞—Ü–∏—é"""
        await self.execute(sql)
        await self.execute(
            "INSERT INTO migrations (id, applied_at) VALUES ($id, CurrentUtcTimestamp());",
            {"$id": migration_id},
        )

    async def rollback_migration(self):
        """–û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–≥—Ä–∞—Ü–∏—é"""
        await self.connect()
        await self.ensure_migrations_table()
        applied = await self.applied_migrations()
        if not applied:
            logger.info("‚ö†Ô∏è –ù–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞.")
            return

        last_migration = applied[0]
        down_file = os.path.join(self._migrations_dir, f"{last_migration}.down.sql")

        if not os.path.exists(down_file):
            logger.info(f"‚ö†Ô∏è –§–∞–π–ª {down_file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–∫–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            return

        logger.info(f"üîÑ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: {last_migration}")
        with open(down_file, "r") as f:
            sql = f.read()
        
        await self.execute(sql)
        await self.execute("DELETE FROM migrations WHERE id = $id;", {"$id": last_migration})

        logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {last_migration} –æ—Ç–∫–∞—Ç–µ–Ω–∞.")
        await self.close()

    async def migrate(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–æ–≤—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        await self.connect()
        await self.ensure_migrations_table()
        applied = set(await self.applied_migrations())
        migration_files = sorted(f for f in os.listdir(self._migrations_dir) if f.endswith(".sql") and not f.endswith(".down.sql"))

        for filename in migration_files:
            if filename not in applied:
                logger.info(f"üì• –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {filename}")
                with open(os.path.join(self._migrations_dir, filename), "r") as f:
                    sql = f.read()
                await self.apply_migration(filename, sql)
                logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {filename} –ø—Ä–∏–º–µ–Ω–µ–Ω–∞.")

        await self.close()


async def run_migrations(endpoint: str, database: str, migrations_dir: str = "migrations"):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    manager = YDBMigrationManager(endpoint=endpoint, database=database, migrations_dir=migrations_dir)
    await manager.migrate()


async def rollback_last_migration(endpoint: str, database: str, migrations_dir: str = "migrations"):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–∫–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
    manager = YDBMigrationManager(endpoint=endpoint, database=database, migrations_dir=migrations_dir)
    await manager.rollback_migration()
